#!/usr/bin/env python3
import math
from collections import Counter
from sys import argv
from sys import exit
from typing import List


def encrypt(msg: dict, key: dict, x: int) -> dict:
    res = []
    o = 0
    for line in msg:
        tmp = []
        i = 0
        for u in range(0, x):
            putin = 0
            for count in range(0, x):
                 putin += (msg[o][count] * key[count][u])
            tmp.append(putin)
        res.append(tmp)
        o += 1
    return res


def decrypt(msg: str, key: dict, x: int) -> str:
    string = ""
    numbers = list(map(int, msg.split(" ")))
    matrix = []
    tmp = []
    for nb in numbers:
        tmp.append(nb)
        if len(tmp) == x:
            matrix.append(tmp)
            tmp = []
    if len(tmp) != 0:
        while len(tmp) < x:
            tmp.append(0)
        matrix.append(tmp)
    new = encrypt(matrix, key, x)
    for mat in new:
        for letter in mat:
            string += chr(round(letter))
    return string


def message_matrix(msg: str, x: int) -> dict:
    matrix = []
    tmp = []
    for char in msg:
        tmp.append(ord(char))
        if len(tmp) == x:
            matrix.append(tmp)
            tmp = []
    if len(tmp) != 0:
        while len(tmp) < x:
            tmp.append(0)
        matrix.append(tmp)
        print(matrix)
    return (matrix)


def find_key() -> dict:
    res = []
    argc = 0
    key = argv[2]
    for car in argv[2]:
        argc += 1
    x = math.sqrt(argc)
    x = round(x + 0.49)
    for i in range(0, x):
        tmp = []
        for j in range(0, x):
            if i * x + j < argc:
                tmp.append(ord(key[i * x + j]))
            else:
                tmp.append(0)
        res.append(tmp)
    return res


def invert_matrix(matrix: dict, x: int) -> dict:
    if x == 1 and matrix[0][0] != 0:
        matrix[0][0] = 1 / matrix[0][0]
    elif x == 2:
        new = matrix[0][0]
        deter = 1 / (matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0])
        matrix[0][0] = matrix[1][1] * deter
        matrix[0][1] = matrix[0][1] * -1 * deter
        matrix[1][0] = matrix[1][0] * -1 * deter
        matrix[1][1] = new * deter
    elif x == 3:
        deter = get_triple_determinant(matrix)
        if deter == 0:
            print("error")
            exit(84)
        matrix = transpose_square_matrix(matrix, 3)
        adj = get_triple_adjacent(matrix)
        for i in range(0, 3):
            for j in range(0, 3):
                matrix[i][j] = 1 / deter * adj[i][j]
    return matrix


def get_triple_determinant(matrix: dict) -> int:
    determinant = matrix[0][0] * (matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1])
    determinant += matrix[0][1] * (matrix[1][0] * matrix[2][2] - matrix[1][2] * matrix[2][0]) * -1
    determinant += matrix[0][2] * (matrix[1][0] * matrix[2][1] - matrix[1][1] * matrix[2][0])
    return determinant


def get_triple_adjacent(matrix: dict) -> dict:
    adj = []
    tmp = []
    tmp.append(matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1])
    tmp.append(matrix[1][0] * matrix[2][2] - matrix[1][2] * matrix[2][0])
    tmp.append(matrix[1][0] * matrix[2][1] - matrix[1][1] * matrix[2][0])
    adj.append(tmp)
    tmp = []
    tmp.append(matrix[0][1] * matrix[2][2] - matrix[0][2] * matrix[2][1])
    tmp.append(matrix[0][0] * matrix[2][2] - matrix[0][2] * matrix[2][0])
    tmp.append(matrix[0][0] * matrix[2][1] - matrix[0][1] * matrix[2][0])
    adj.append(tmp)
    tmp = []
    tmp.append(matrix[0][1] * matrix[1][2] - matrix[0][2] * matrix[1][1])
    tmp.append(matrix[0][0] * matrix[1][2] - matrix[0][2] * matrix[1][0])
    tmp.append(matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0])
    adj.append(tmp)
    adj[0][1] *= -1
    adj[1][0] *= -1
    adj[1][2] *= -1
    adj[2][1] *= -1
    return adj


def transpose_square_matrix(matrix: dict, x: int) -> int:
    tmp = []
    tmp2 = []
    for i in range(0, x):
        for j in range(0, x):
            tmp2.append(matrix[i][j])
        tmp.append(tmp2)
        tmp2 = []
    for i in range(0, x):
        for j in range(0, x):
            matrix[i][j] = tmp[j][i]
    return matrix


def display_help():
    print("USAGE")
    print("    ./103cipher message key flag", end = "\n\n")
    print("DESCRIPTION")
    print("    message    \ta message, made of ASCII characters")
    print("    key    \tthe encryption key, made of ASCII characters")
    print("    flag    \t0 for the message to be encrypted, 1 to be decrypted")


def error_handling():
    if len(argv) == 2:
        if argv[1] == "-h":
            display_help()
            exit(0)
    if len(argv) != 4:
        print("Invalid number of arguments")
        exit(84)
    elif argv[3] != "0" and argv[3] != "1":
        print("Invalid operation")
        exit(84)

def size_msg(msg : dict) -> int:
    i = 0
    for lis in msg:
        for nb in lis:
            i += 1
    return i

def base():
    error_handling()
    key = find_key()
    x = 0
    count = 0
    if not key:
        exit(84)
    x = 0
    if len(argv[2]) > 1:
        for tes in key[0]:
            x += 1
    else:
        x = 1
    if argv[3] == "1":
        key = invert_matrix(key, x)
    msg = message_matrix(argv[1], x)
    size = size_msg(msg)
    print("Key matrix:")
    for nb in key:
        for i in range(0, x):
            if i != x - 1:
                print(nb[i], end = "\t")
            else:
                print(nb[i])
    print("")
    if argv[3] == "0":
        cry = encrypt(msg, key, x)
        print("Encrypted message:")
        for nb in cry:
            for i in range(0, x):
                count += 1
                if count != size:
                    print(nb[i], end = " ")
                else:
                    print(nb[i])
    elif argv[3] == "1":
        print("Decrypted message:")
        for c in decrypt(argv[1], key, x):
            if (ord(c) <= 127 and ord(c) >= 32):
                print(c, end = "")


base()