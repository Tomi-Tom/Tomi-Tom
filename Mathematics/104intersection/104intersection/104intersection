#!/usr/bin/python3

import sys
from math import sqrt, tan, radians
from sys import argv

def find_solutions(a : int, b : int, c : int) -> list:
    delta = b ** 2 - 4 * a * c
    if delta > 0:
        x1 = (-b - sqrt(delta)) / 2 * a
        x2 = (-b + sqrt(delta)) / 2 * a
        return [x1, x2]
    elif delta < 0:
        return []
    elif delta == 0:
        x0 = -(b / 2 * a)
        return [x0]

def find_cord_point(P : tuple, V : tuple, t : int) -> tuple:
    cord = (P[0] + (V[0] * t), P[1] + (V[1] * t), P[2] + (V[2] * t))
    return cord

def find_quad_coef_sphere(P : tuple, V : tuple, R : int):
    a = (V[0] ** 2 + V[1] ** 2 + V[2] ** 2)
    b = 2 * (V[0] * P[0] + V[1] * P[1] + V[2] * P[2])
    c = (P[0] ** 2 + P[1] ** 2 + P[2] ** 2) - R ** 2
    return a, b, c

def find_quad_coef_cylinder(P : tuple, V : tuple, R : int):
    a = (V[0] ** 2 + V[1] ** 2)
    b = 2 * (V[0] * P[0] + V[1] * P[1])
    c = (P[0] ** 2 + P[1] ** 2) - R ** 2
    return a, b, c

def find_quad_coef_cone(P : tuple, V : tuple, theta : int):
    a = (V[0] ** 2 + V[1] ** 2)
    b = 2 * (V[0] * P[0] + V[1] * P[1]) - tan(radians(theta)) ** 2 * V[2]
    c = (P[0] ** 2 + P[1] ** 2) - tan(radians(theta)) ** 2 * P[2]
    return a, b, c

def help():
    print('''USAGE
    ./104intersection opt xp yp zp xv yv zv p

DESCRIPTION

    opt             surface option: 1 for a sphere, 2 for a cylinder, 3 for a cone
    (xp, yp, zp)    coordinates of a point by which the light ray passes through
    (xv, yv, zv)    coordinates of a vector parallel to the light ray
    p               parameter: radius of the sphere, radius of the cylinder, or
                    angle formed by the cone and the Z-axis''')
    return

def error_handling():
    ac = len(argv)
    if ac != 9 and ac != 2 and argv[1] != "-h":
        exit(84)

def main():
    error_handling()
    if argv[1] == "-h":
        help()
        sys.exit(0)
    P = (int(argv[2]), int(argv[3]), int(argv[4]))
    V = (int(argv[5]), int(argv[6]), int(argv[7]))
    func = (find_quad_coef_sphere, find_quad_coef_cylinder, find_quad_coef_cone)
    if int(argv[1]) == 1:
        print("Sphere of radius", argv[8])
        print("Line passing through the point", P, "and parallel to the vector", V)
    a, b, c = func[int(argv[1]) - 1](P, V, int(argv[8]))
    intersections = find_solutions(a, b, c)
    print(intersections)
    if len(intersections) == 1 :
        print(len(intersections), "intersection point:")
    elif len(intersections) == 2 :
        print(len(intersections), "intersections points:")
    else :
        print("No intersection point.")
    for i in intersections :
        print(find_cord_point(P, V, i))

main()